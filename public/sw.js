// Bump the cache version to ensure old, problematic entries are purged.
const CACHE_NAME = 'padel-segria-v3';
// Only precache truly static, versioned, or rarely-changing assets.
// Avoid precaching dynamic/SSR pages like '/', '/dashboard', etc.
const STATIC_ASSETS = [
  '/manifest.json',
  '/robots.txt',
  '/sitemap.xml',
  '/sitemap-0.xml',
  // Favicons and app icons generated by Next.js metadata
  '/favicon.ico',
  '/icon.png',
  '/apple-icon.png',
  '/opengraph-image.png',
  '/twitter-image.png',
  // PWA icons (maskable/any)
  '/icons/icon-72x72.png',
  '/icons/icon-96x96.png',
  '/icons/icon-128x128.png',
  '/icons/icon-144x144.png',
  '/icons/icon-152x152.png',
  '/icons/icon-192x192.png',
  '/icons/icon-384x384.png',
  '/icons/icon-512x512.png',
  '/logo_yellow.png',
  // Hero images (small, used frequently)
  '/hero/background_ball_logo.png',
  '/hero/line.png',
  '/hero/tennis_player.png',
  // Blog header example (static)
  '/blog/introducing-supabase/header.png',
];

// Install event - cache static assets
self.addEventListener('install', (event) => {
  event.waitUntil(
    (async () => {
      const cache = await caches.open(CACHE_NAME);
      console.log('Caching static assets');
      // Add assets defensively so one failure doesn't abort the install
      await Promise.allSettled(
        STATIC_ASSETS.map((url) => cache.add(url).catch(() => void 0))
      );
      await self.skipWaiting();
    })()
  );
});

// Activate event - clean up old caches
self.addEventListener('activate', (event) => {
  event.waitUntil(
    caches.keys()
      .then((cacheNames) => {
        return Promise.all(
          cacheNames.map((cacheName) => {
            if (cacheName !== CACHE_NAME) {
              console.log('Deleting old cache:', cacheName);
              return caches.delete(cacheName);
            }
          })
        );
      })
      .then(async () => {
        // Use navigation preload to speed up navigations while the SW boots.
        if (self.registration.navigationPreload) {
          try { await self.registration.navigationPreload.enable(); } catch (_) {}
        }
        return self.clients.claim();
      })
  );
});

// Fetch event - serve from cache when offline
self.addEventListener('fetch', (event) => {
  // Only handle GET requests
  if (event.request.method !== 'GET') {
    return;
  }

  const url = new URL(event.request.url);

  // Skip intercepting API/auth routes to avoid caching dynamic data or redirects
  if (url.pathname.startsWith('/api/') || 
      url.pathname.startsWith('/api/auth/') || 
      url.pathname.startsWith('/auth/callback') ||
      url.hostname.includes('supabase.co')) {
    return; // Let the browser handle these directly
  }

  // For navigations/documents, avoid serving cached redirects.
  // Use a network-first strategy with redirect: 'follow' so auth redirects work.
  if (event.request.mode === 'navigate' || event.request.destination === 'document') {
    event.respondWith((async () => {
      try {
        // Prefer any preloaded navigation response if available
        const preload = await event.preloadResponse;
        if (preload) return preload;

        // Create a new Request to ensure redirects are followed and cookies are sent.
        const req = new Request(event.request.url, {
          method: 'GET',
          headers: event.request.headers,
          credentials: 'include',
          redirect: 'follow'
        });
        const response = await fetch(req);
        return response;
      } catch (err) {
        // Minimal offline fallback page (do not try to serve cached /dashboard)
        return new Response(`<!DOCTYPE html><html><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><title>Padel Segrià - Offline</title><style>body{margin:0;font-family:system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial,sans-serif;background:#000;color:#fff;display:flex;align-items:center;justify-content:center;min-height:100vh;padding:24px;text-align:center}</style></head><body><main><h1>Estás sin conexión</h1><p>No se puede cargar la página mientras no haya conexión.</p></main></body></html>`, {
          headers: { 'Content-Type': 'text/html' }
        });
      }
    })());
    return;
  }

  // For same-origin static asset requests (non-documents), use cache-first.
  // Only cache static file types and Next.js immutable assets, not JSON/data APIs.
  const staticDestinations = new Set(['style', 'script', 'image', 'font']);
  const isStaticAsset = (
    url.origin === self.location.origin &&
    (staticDestinations.has(event.request.destination) ||
      url.pathname.startsWith('/_next/static/') ||
      url.pathname.startsWith('/_next/image'))
  );

  if (isStaticAsset) {
    event.respondWith(
      caches.match(event.request).then((cached) => {
        if (cached) return cached;
        return fetch(event.request).then((fetchResponse) => {
          // Only cache successful, basic (same-origin) responses
          if (fetchResponse && fetchResponse.ok && fetchResponse.type === 'basic') {
            const copy = fetchResponse.clone();
            caches.open(CACHE_NAME).then((cache) => cache.put(event.request, copy));
          }
          return fetchResponse;
        });
      })
    );
  }
});